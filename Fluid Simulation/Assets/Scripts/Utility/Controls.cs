//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Working Attemps/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""ControlsMApping"",
            ""id"": ""25febcfc-49eb-4b99-8e70-91f5fe647dd5"",
            ""actions"": [
                {
                    ""name"": ""Scroll"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d9ad32d1-a265-4f29-95cf-95e6e5d49721"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pull"",
                    ""type"": ""Button"",
                    ""id"": ""f6197e8d-219a-4f26-8960-4f8c81b11b7e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Push"",
                    ""type"": ""Button"",
                    ""id"": ""db99a22a-f62b-4eaa-8118-a330088ddf9d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""18a8acd8-9a3a-4aac-8567-b4bbf7a6b04e"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc0a361e-552d-4b63-920c-629fa13794d1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pull"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d024e87-a5b0-484e-960d-8cfe2a5fd427"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Push"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ControlsMApping
        m_ControlsMApping = asset.FindActionMap("ControlsMApping", throwIfNotFound: true);
        m_ControlsMApping_Scroll = m_ControlsMApping.FindAction("Scroll", throwIfNotFound: true);
        m_ControlsMApping_Pull = m_ControlsMApping.FindAction("Pull", throwIfNotFound: true);
        m_ControlsMApping_Push = m_ControlsMApping.FindAction("Push", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ControlsMApping
    private readonly InputActionMap m_ControlsMApping;
    private List<IControlsMAppingActions> m_ControlsMAppingActionsCallbackInterfaces = new List<IControlsMAppingActions>();
    private readonly InputAction m_ControlsMApping_Scroll;
    private readonly InputAction m_ControlsMApping_Pull;
    private readonly InputAction m_ControlsMApping_Push;
    public struct ControlsMAppingActions
    {
        private @Controls m_Wrapper;
        public ControlsMAppingActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Scroll => m_Wrapper.m_ControlsMApping_Scroll;
        public InputAction @Pull => m_Wrapper.m_ControlsMApping_Pull;
        public InputAction @Push => m_Wrapper.m_ControlsMApping_Push;
        public InputActionMap Get() { return m_Wrapper.m_ControlsMApping; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlsMAppingActions set) { return set.Get(); }
        public void AddCallbacks(IControlsMAppingActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlsMAppingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlsMAppingActionsCallbackInterfaces.Add(instance);
            @Scroll.started += instance.OnScroll;
            @Scroll.performed += instance.OnScroll;
            @Scroll.canceled += instance.OnScroll;
            @Pull.started += instance.OnPull;
            @Pull.performed += instance.OnPull;
            @Pull.canceled += instance.OnPull;
            @Push.started += instance.OnPush;
            @Push.performed += instance.OnPush;
            @Push.canceled += instance.OnPush;
        }

        private void UnregisterCallbacks(IControlsMAppingActions instance)
        {
            @Scroll.started -= instance.OnScroll;
            @Scroll.performed -= instance.OnScroll;
            @Scroll.canceled -= instance.OnScroll;
            @Pull.started -= instance.OnPull;
            @Pull.performed -= instance.OnPull;
            @Pull.canceled -= instance.OnPull;
            @Push.started -= instance.OnPush;
            @Push.performed -= instance.OnPush;
            @Push.canceled -= instance.OnPush;
        }

        public void RemoveCallbacks(IControlsMAppingActions instance)
        {
            if (m_Wrapper.m_ControlsMAppingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlsMAppingActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlsMAppingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlsMAppingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlsMAppingActions @ControlsMApping => new ControlsMAppingActions(this);
    public interface IControlsMAppingActions
    {
        void OnScroll(InputAction.CallbackContext context);
        void OnPull(InputAction.CallbackContext context);
        void OnPush(InputAction.CallbackContext context);
    }
}
